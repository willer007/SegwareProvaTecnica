package factories;

import entities.MessageEntity;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

class MessageFactorySingletonTest {

    MessageEntity expectedTextoMessageEntity = new MessageEntity((byte) 0x0A ,
            (byte)0x10,
            (byte)0xA1,
            new byte[]{0x48,0x65,0x6C,0x6C,0x6F,0x20,0x57,0x6F,0x72,0x6C,0x64},
            (byte)0xDC,
            (byte)0x0D);

    MessageEntity expectedInfoUsuarioMessageEntity = new MessageEntity((byte) 0x0A ,
            (byte)0x15,
            (byte)0xA2,
            new byte[]{0x20,0x7A,(byte)0xC3,0x0C,0x4D,0x69,0x63,0x68,0x65,0x6C,0x20,0x52,0x65,0x69,0x70,0x73},
            (byte)0x16,
            (byte)0x0D);

    MessageEntity expectedSolicitacaoDataHoraMessageEntity = new MessageEntity((byte) 0x0A ,
            (byte)0x16,
            (byte)0xA3,
            new byte[]{0x41,0x6D,0x65,0x72,0x69,0x63,0x61,0x2F,0x53,0x61,0x6F,0x5F,0x50,0x61,0x75,0x6C,0x6F},
            (byte)0xCD,
            (byte)0x0D);



    @Test
    void buildMessage() {
        assertArrayEquals( expectedTextoMessageEntity.toByteArray(),
                MessageFactorySingleton.buildMessage((byte) 0xA1,new byte[]{0x48,0x65,0x6C,0x6C,0x6F,0x20,0x57,0x6F,0x72,0x6C,0x64}).toByteArray());

    }

    @Test
    void buildTextMessage() {
        assertArrayEquals( expectedTextoMessageEntity.toByteArray(),
                MessageFactorySingleton.buildMessage((byte) 0xA1,new byte[]{0x48,0x65,0x6C,0x6C,0x6F,0x20,0x57,0x6F,0x72,0x6C,0x64}).toByteArray());
    }

    @Test
    void buildInfoUsuarioMessage() {
        assertArrayEquals( expectedInfoUsuarioMessageEntity.toByteArray(),
                MessageFactorySingleton.buildMessage((byte) 0xA2,new byte[]{0x20,0x7A,(byte)0xC3,0x0C,0x4D,0x69,0x63,0x68,0x65,0x6C,0x20,0x52,0x65,0x69,0x70,0x73}).toByteArray());
    }

    @Test
    void buildSolicitacaoDataHoraMessage() {
        assertArrayEquals( expectedSolicitacaoDataHoraMessageEntity.toByteArray(),
                MessageFactorySingleton.buildMessage((byte) 0xA3,new byte[]{0x41,0x6D,0x65,0x72,0x69,0x63,0x61,0x2F,0x53,0x61,0x6F,0x5F,0x50,0x61,0x75,0x6C,0x6F}).toByteArray());

    }
}